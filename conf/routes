# API controllers
# Sign up
POST          /api/$version<v[1-4]>/sign-up                               @controllers.rest.SignUpController.emailSignUp(version)
POST          /api/$version<v[1-4]>/fb-auth                               @controllers.rest.SignUpController.fbAuth(version)
POST          /api/$version<v[1-4]>/fb-sign-up                            @controllers.rest.SignUpController.fbSignUp(version)

# Log in
POST          /api/$version<v[1-4]>/log-in                                @controllers.rest.LogInController.logIn(version)
GET           /api/$version<v[1-4]>/log-out                               @controllers.rest.LogInController.logOut(version)
POST          /api/$version<v[1-4]>/forget-password                       @controllers.rest.LogInController.forgotPassword(version)

# Phone verification
POST          /api/$version<v[1-4]>/phone/verify/:code                    @controllers.rest.PhoneVerificationController.verifyCode(version, code)
POST          /api/$version<v[1-4]>/phone/resend                          @controllers.rest.PhoneVerificationController.resendCode(version)
POST          /api/$version<v[1-4]>/phone/change                          @controllers.rest.PhoneVerificationController.changePhoneNumber(version)

# User profile
POST          /api/$version<v[1-4]>/profile/change-password               @controllers.rest.UserProfileController.changePassword(version)
PUT           /api/$version<v[1-4]>/profile/picture                       @controllers.rest.UserProfileController.uploadProfilePicture(version)
GET           /api/$version<v[1-4]>/profile/picture/:fileName             @controllers.rest.UserProfileController.getProfilePicture(version, fileName)
GET           /api/$version<v[1-4]>/profile                               @controllers.rest.UserProfileController.getProfileInfo(version)
PUT           /api/$version<v[1-4]>/profile/update                        @controllers.rest.UserProfileController.updateProfile(version)
PUT           /api/$version<v[1-4]>/profile/default-payment-method        @controllers.rest.UserProfileController.updateDefaultPaymentMethod(version)

#Locations
GET           /api/$version<v[1-4]>/locations/:id                         @controllers.rest.LocationController.get(version, id: Int)
POST          /api/$version<v[1-4]>/locations/new                         @controllers.rest.LocationController.create(version)
DELETE        /api/$version<v[1-4]>/locations/:id                         @controllers.rest.LocationController.delete(version, id: Int)
GET           /api/$version<v[1-4]>/locations                             @controllers.rest.LocationController.list(version, offset: Int = 0, limit: Int = 10)
PUT           /api/$version<v[1-4]>/locations/:id                         @controllers.rest.LocationController.update(version, id: Int)

#Tasks
POST          /api/$version<v[1-4]>/tasks/new                             @controllers.rest.TasksController.createCustomerTask(version)
POST          /api/$version<v[2-4]>/tasks/anonymous/new                   @controllers.rest.TasksController.createAnonymousTask(version)
POST          /api/$version<v[2-4]>/tasks/partnership/new                 @controllers.rest.TasksController.createPartnershipTask(version)
GET           /api/$version<v[1-4]>/tasks                                 @controllers.rest.TasksController.listTasks(version, offset: Int = 0, limit: Int = 10, status: Set[Int], ignore: Set[Int])
POST          /api/$version<v[1-4]>/tasks/refresh                         @controllers.rest.TasksController.onTaskUpdate(version)
POST          /api/$version<v[1-4]>/tasks/complete                        @controllers.rest.TasksController.completeTask(version)
GET           /api/v1/tasks/pending                                       @controllers.rest.TasksController.getPendingTask
GET           /api/$version<v[2-4]>/tasks/pending                         @controllers.rest.TasksController.getPendingTasks(version)
GET           /api/$version<v[1-4]>/tasks/active                          @controllers.rest.TasksController.getActiveTask(version)
GET           /api/$version<v[1-4]>/tasks/:id                             @controllers.rest.TasksController.getTask(version, id: Long)
GET           /api/$version<v[1-4]>/tasks/agents/:id/coordinates          @controllers.rest.TasksController.getAgentCoordinates(version, id: Long)
GET           /api/$version<v[1-4]>/tasks/:id/cancel                      @controllers.rest.TasksController.cancelTask(version, id: Long)

#Vehicles
GET           /api/$version<v[3-4]>/vehicles/years                        @controllers.rest.VehiclesController.getAvailableYears(version)
GET           /api/$version<v[3-4]>/vehicles/makes                        @controllers.rest.VehiclesController.getMakesByYear(version, year: Int)
GET           /api/$version<v[3-4]>/vehicles/models                       @controllers.rest.VehiclesController.getModelsByYearAndMake(version, year: Int, make: String)
GET           /api/$version<v[1-4]>/vehicles                              @controllers.rest.VehiclesController.list(version, offset: Int = 0, limit: Int = 10)
POST          /api/$version<v[1-4]>/vehicles/new                          @controllers.rest.VehiclesController.create(version)
GET           /api/$version<v[1-4]>/vehicles/:id                          @controllers.rest.VehiclesController.get(version, id: Int)
DELETE        /api/$version<v[1-4]>/vehicles/:id                          @controllers.rest.VehiclesController.delete(version, id: Int)
PUT           /api/$version<v[1-4]>/vehicles/:id                          @controllers.rest.VehiclesController.update(version, id: Int)

#Payment Cards
POST          /api/$version<v[1-4]>/cards/new                             @controllers.rest.PaymentCardsController.addPaymentCard(version)
GET           /api/$version<v[1-4]>/cards                                 @controllers.rest.PaymentCardsController.listPaymentCards(version)
DELETE        /api/$version<v[1-4]>/cards/:id                             @controllers.rest.PaymentCardsController.removePaymentCard(version, id: String)
GET           /api/$version<v[3-4]>/cards/ephemeral-key                   @controllers.rest.PaymentCardsController.createEphemeralKey(version, apiVersion: String)

#Notifications
POST          /api/$version<v[1-4]>/notifications/subscribe               @controllers.rest.PushNotificationsController.subscribe(version)
POST          /api/$version<v[1-4]>/notifications/unsubscribe             @controllers.rest.PushNotificationsController.unsubscribe(version)

#Settings
GET           /api/$version<v[1-4]>/settings                              @controllers.rest.SettingsController.getSettings(version)

#Services
GET           /api/$version<v[3-4]>/services/:vehicleId                   @controllers.rest.ServicesController.getServicesForRegisteredCustomer(version, vehicleId: Int)
GET           /api/$version<v[3-4]>/services/:make/:model/:year           @controllers.rest.ServicesController.getServices(version, make, model, year: Int)

#Bookings
GET           /api/$version<v[3-4]>/booking-slots                         @controllers.rest.BookingsController.getBookingSlots(version)

#---------------------------------------------------   Admin panel   ---------------------------------------------------
GET           /admin                                                      @controllers.admin.DashboardController.getAdminDashboard

#Bookings slots
GET           /admin/booking-slots/:countryId                             @controllers.admin.BookingSlotController.getBookingSlots(countryId: Int, date: java.time.LocalDate ?= java.time.LocalDate.now())
GET           /admin/booking-slots/:countryId/time-slot/:id               @controllers.admin.BookingSlotController.getBookingSlot(id: Int, countryId: Int ,date: java.time.LocalDate ?= java.time.LocalDate.now())
POST          /admin/booking-slots/:countryId/time-slot/:id               @controllers.admin.BookingSlotController.updateBookingSlot(countryId: Int, id: Int)

#-----------------------------------------------------------------------------------------------------------------------

# Web controllers
# Password recovery
GET           /password-recover/success                                   @controllers.PasswordRecoveryController.successPage
GET           /password-recover/not-found                                 @controllers.PasswordRecoveryController.notFound
GET           /password-recover/:code                                     @controllers.PasswordRecoveryController.getRecoverPasswordPage(code: String)
POST          /password-recover                                           @controllers.PasswordRecoveryController.submitForm

# Home
GET           /assets/*file                                               controllers.Assets.versioned(path="/public", file: Asset)
GET           /                                                           @controllers.Application.index
